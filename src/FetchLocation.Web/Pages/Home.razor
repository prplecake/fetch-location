@page "/"
@using FetchLocation.Web.Entities
@using FetchLocation.Web.Services
@inject IJSRuntime JS
@inject ILogger<Index> Logger
@inject ClipboardService ClipboardService
@inject NwsApiService NwsApiService
<div class="main">
  <PageTitle>fetch-location</PageTitle>

  <p>Your Location:</p>

  <p>
    Coords: @(coords is not null ? coords : "Loading...")
    @if (coords is not null)
    {
      <button @onclick="CopyCoordsHandler">@CopyCoordsButtonText</button>
    }
  </p>

  <p>
    NWS Grid Points: @(gridPoints is not null ? gridPoints : "Loading...")
    @if (gridPoints is not null)
    {
      <button @onclick="CopyGridPointsHandler">@CopyGridPointsButtonText</button>
    }
  </p>

  <details>
    <summary>Weather Stations</summary>
    @if (weatherStations is not null && weatherStations.Any())
    {
      <ol>
        @foreach (var station in weatherStations)
        {
          <li>
            <a href="https://forecast.weather.gov/zipcity.php?inputstring=@station.StationIdentifier" target="_blank">
              @station.StationIdentifier
            </a> - @station.Name
          </li>
        }
      </ol>
    }
    else
    {
      <p>Loading...</p>
    }
  </details>
</div>

@code {
  private Coordinates? coords;
  private GridPoints? gridPoints;
  private List<WeatherStation>? weatherStations;
  public string CopyGridPointsButtonText = "Copy";
  public string CopyCoordsButtonText = "Copy";
  private async Task<Coordinates> GetLocation() => await JS.InvokeAsync<Coordinates>("getLocation");
  protected override async Task OnInitializedAsync()
  {
    coords = await GetLocation();
    StateHasChanged();
    if (coords is not null)
      gridPoints = await NwsApiService.GetGridPointsAsync(coords);
    if (gridPoints is not null)
      weatherStations = await NwsApiService.GetWeatherStationsAsync(gridPoints);
  }
  private async Task CopyCoordsHandler(MouseEventArgs e)
  {
    try
    {
      await ClipboardService.CopyToClipboard(coords.ToString());
      CopyCoordsButtonText = "Copied!";
      StateHasChanged();
      _ = new Timer(_ =>
      {
        CopyCoordsButtonText = "Copy";
        StateHasChanged();
      }, null, 3000, Timeout.Infinite);
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Failed to copy coords to clipboard");
    }

  }
  private async Task CopyGridPointsHandler(MouseEventArgs e)
  {
    try
    {
      await ClipboardService.CopyToClipboard(gridPoints.ToString());
      CopyGridPointsButtonText = "Copied!";
      StateHasChanged();
      _ = new Timer(_ =>
      {
        CopyGridPointsButtonText = "Copy";
        StateHasChanged();
      }, null, 3000, Timeout.Infinite);
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Failed to copy grid points to clipboard");
    }
  }
}